/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1500  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // default: 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <7 8 9 10 11 6 18 30 31 19 32 20 33 21 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>; // List of keys on the right side of the keyboard
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <1 2 3 4 5 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>; // List of keys on the left side of the keyboard
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB                       &kp Q         &kp W         &kp E        &kp R        &kp T        &kp Y    &kp U        &kp I        &kp O         &kp P            &kp BSPC
&hml LS(LA(LC(LGUI))) ESCAPE  &hml LSHFT A  &hml LCTRL S  &hml LALT D  &hml LGUI F  &kp G        &kp H    &hmr RGUI J  &hmr RALT K  &hmr RCTRL L  &hmr RSHFT SEMI  &hmr RS(RA(RC(RGUI))) SINGLE_QUOTE
&kp LSHFT                     &kp Z         &kp X         &kp C        &kp V        &kp B        &kp N    &kp M        &kp COMMA    &kp DOT       &kp FSLH         &kp RSHFT
                                                          &mo 3        &mo 1        &kp SPACE    &kp RET  &mo 2        &mo 7
            >;
        };

        num {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp F1          &kp F2                &kp F3            &kp F4            &kp F5     &kp PLUS      &kp N7                   &kp N8                   &kp N9                       &kp MINUS          &trans
&trans  &hml LSHIFT F6  &hml LEFT_CONTROL F7  &hml LEFT_ALT F8  &hml LEFT_GUI F9  &kp F10    &kp ASTERISK  &hmr RIGHT_GUI NUMBER_4  &hmr RIGHT_ALT NUMBER_5  &hmr RIGHT_CONTROL NUMBER_6  &hmr RSHIFT SLASH  &trans
&trans  &kp F11         &kp F12               &kp F13           &kp F14           &kp F15    &kp DOT       &kp N1                   &kp N2                   &kp N3                       &kp COMMA          &trans
                                              &trans            &trans            &trans     &trans        &trans                   &kp NUMBER_0
            >;
        };

        sym_nav {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp EXCL                      &kp AT                           &kp HASH                    &kp DLLR                         &kp PRCNT           &kp CARET   &kp AMPS                   &kp ASTRK                &kp LPAR                  &kp RPAR          &trans
&trans  &hml LEFT_SHIFT LEFT_BRACKET  &hml LEFT_CONTROL RIGHT_BRACKET  &hml LALT LEFT_PARENTHESIS  &hml LEFT_GUI RIGHT_PARENTHESIS  &kp SINGLE_QUOTE    &kp LEFT    &hmr RIGHT_GUI DOWN_ARROW  &hmr RIGHT_ALT UP_ARROW  &hmr RIGHT_CONTROL RIGHT  &hmr RSHIFT PIPE  &trans
&trans  &kp PLUS                      &kp MINUS                        &kp ASTERISK                &kp SLASH                        &kp GRAVE           &kp K_BACK  &kp PAGE_DOWN              &kp PG_UP                &kp K_FORWARD             &kp QUESTION      &trans
                                                                       &trans                      &trans                           &trans              &trans      &trans                     &trans
            >;
        };

        mouse_misc {
            bindings = <
&trans  &sk INSERT  &kp HOME  &kp END   &kp PRINTSCREEN  &kp PAUSE_BREAK    &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &trans  &trans
&trans  &mkp MB4    &mkp MB2  &mkp MB3  &mkp LCLK        &mkp MB5           &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &trans  &trans
&trans  &trans      &trans    &trans    &trans           &trans             &trans          &trans          &trans        &trans           &trans  &trans
                              &trans    &trans           &trans             &trans          &trans          &trans
            >;
        };

        gaming {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &mo 6   &mo 5   &trans    &trans  &trans  &trans
            >;
        };

        gaming_num {
            bindings = <
&trans  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp N6  &kp N7  &kp N8  &kp N9  &kp N0    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        gaming_fn {
            bindings = <
&trans  &kp F1   &kp F2   &kp F3  &kp F4  &kp F5     &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp F6   &kp F7   &kp F8  &kp F9  &kp F10    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp F11  &kp F12  &trans  &trans  &trans     &trans  &trans  &trans  &trans  &trans  &trans
                          &trans  &trans  &trans     &trans  &trans  &trans
            >;
        };

        controls {
            bindings = <
&bt BT_CLR  &bt BT_SEL 0       &bt BT_SEL 1   &bt BT_SEL 2        &bt BT_SEL 3  &bt BT_SEL 4    &kp C_REWIND    &kp C_BRI_DEC      &kp C_BRI_INC    &kp C_FAST_FORWARD  &kp C_PLAY_PAUSE  &trans
&trans      &kp C_RANDOM_PLAY  &kp C_SHUFFLE  &trans              &trans        &trans          &kp C_PREVIOUS  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_NEXT          &trans            &trans
&trans      &trans             &trans         &kp K_CONTEXT_MENU  &trans        &trans          &trans          &kp C_MUTE         &trans           &trans              &trans            &trans
                                              &to 8               &trans        &trans          &trans          &trans             &trans
            >;
        };

        layers {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&to 0   &trans  &trans  &to 0   &trans  &to 4     &trans  &trans  &trans  &trans  &trans  &to 0
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
